/// ! This file is generated from ../../../codegen/Scene/CPlugParticleEmitterSubModel.xtoml !
/// ! Do not edit this file manually !

class DPlugParticleEmitterSubModel : RawBufferElem {
	DPlugParticleEmitterSubModel(RawBufferElem@ el) {
		if (el.ElSize != 0x6b0) throw("invalid size for DPlugParticleEmitterSubModel");
		super(el.Ptr, el.ElSize);
	}
	DPlugParticleEmitterSubModel(uint64 ptr) {
		super(ptr, 0x6b0);
	}
	DPlugParticleEmitterSubModel(CPlugParticleEmitterSubModel@ nod) {
		if (nod is null) throw("not a CPlugParticleEmitterSubModel");
		super(Dev_GetPointerForNod(nod), 0x6b0);
	}
	CPlugParticleEmitterSubModel@ get_Nod() {
		return cast<CPlugParticleEmitterSubModel>(Dev_GetNodFromPointer(ptr));
	}

	CPlugMaterial@ get_Material() { return cast<CPlugMaterial>(this.GetNod(0x120)); }
	void set_Material(CPlugMaterial@ value) { this.SetNod(0x120, value); }
	CPlugShaderApply@ get_ShaderApply() { return cast<CPlugShaderApply>(this.GetNod(0x128)); }
	void set_ShaderApply(CPlugShaderApply@ value) { this.SetNod(0x128, value); }
	uint get_CircularTrailVertPartPerCount() { return (this.GetUint32(0x188)); }
	void set_CircularTrailVertPartPerCount(uint value) { this.SetUint32(0x188, value); }
	bool get_TextureAtlasAnimationRandomPhase() { return (this.GetBool(0x1b8)); }
	void set_TextureAtlasAnimationRandomPhase(bool value) { this.SetBool(0x1b8, value); }
	vec3 get_BeamSize() { return (this.GetVec3(0x1F0)); }
	void set_BeamSize(vec3 value) { this.SetVec3(0x1F0, value); }
	float get_SizeBirth() { return (this.GetFloat(0x1F8)); }
	void set_SizeBirth(float value) { this.SetFloat(0x1F8, value); }
	float get_SizeBirthVariation() { return (this.GetFloat(0x1FC)); }
	void set_SizeBirthVariation(float value) { this.SetFloat(0x1FC, value); }
	bool get_SizeBirthUseEmissionZone() { return (this.GetBool(0x200)); }
	void set_SizeBirthUseEmissionZone(bool value) { this.SetBool(0x200, value); }
	// TrailRadius
	float get_SizeBirthEmissionZoneScale() { return (this.GetFloat(0x204)); }
	void set_SizeBirthEmissionZoneScale(float value) { this.SetFloat(0x204, value); }
	bool get_SizeBirthUseIntensity() { return (this.GetBool(0x20C)); }
	void set_SizeBirthUseIntensity(bool value) { this.SetBool(0x20C, value); }
	// 0 = Constant, 1 = ColorOverLife
	uint get_ColorGradientUse() { return (this.GetUint32(0x420)); }
	void set_ColorGradientUse(uint value) { this.SetUint32(0x420, value); }
	// 0 = RGB, 1 = RGB+Hue, 2 = Hue00, 3 = LAmbientLocals
	uint get_ColorType() { return (this.GetUint32(0x428)); }
	void set_ColorType(uint value) { this.SetUint32(0x428, value); }
}


