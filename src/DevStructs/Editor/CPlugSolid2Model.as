/// ! This file is generated from ../../../codegen/Editor/CPlugSolid2Model.xtoml !
/// ! Do not edit this file manually !

class DPlugSolid2Model : RawBufferElem {
	DPlugSolid2Model(RawBufferElem@ el) {
		if (el.ElSize != SZ_SOLID2MODEL) throw("invalid size for DPlugSolid2Model");
		super(el.Ptr, el.ElSize);
	}
	DPlugSolid2Model(uint64 ptr) {
		super(ptr, SZ_SOLID2MODEL);
	}
	DPlugSolid2Model(CPlugSolid2Model@ nod) {
		if (nod is null) throw("not a CPlugSolid2Model");
		super(Dev_GetPointerForNod(nod), SZ_SOLID2MODEL);
	}
	CPlugSolid2Model@ get_Nod() {
		return cast<CPlugSolid2Model>(Dev_GetNodFromPointer(ptr));
	}

	// 0x30: f..f
	uint32 get_Unk_30() { return (this.GetUint32(0x30)); }
	void set_Unk_30(uint32 value) { this.SetUint32(0x30, value); }
	// 0x34: 0x7a 0 0 0
	uint32 get_Flags() { return (this.GetUint32(0x34)); }
	void set_Flags(uint32 value) { this.SetUint32(0x34, value); }
	// 0x38: 0x1 in simple, 0 in fresh; 2 = dynamic, 3 = car, 4 = sm body
	uint32 get_VisCstType() { return (this.GetUint32(0x38)); }
	void set_VisCstType(uint32 value) { this.SetUint32(0x38, value); }
	// 0x40: ptr but looks like uninitialized
	// 0x48: ptr but looks like uninitialized
	// 0x5C: vec3(-1)
	// 0x80: Buf of MwIds (bone names?): Body, FLWheel,FRWheel,...,SpoilerTopL,...,FRGuard
	// 0x90: DamageZone
	// 0xA8: buffer of Visual Indexed Triangles *
	uint64 get_BufVisIxTrisPtr() { return (this.GetUint64(0xA8)); }
	void set_BufVisIxTrisPtr(uint64 value) { this.SetUint64(0xA8, value); }
	uint32 get_BufVisIxTrisLen() { return (this.GetUint32(0xB0)); }
	void set_BufVisIxTrisLen(uint32 value) { this.SetUint32(0xB0, value); }
	uint32 get_BufVisIxTrisCap() { return (this.GetUint32(0xB4)); }
	void set_BufVisIxTrisCap(uint32 value) { this.SetUint32(0xB4, value); }
	// 0xC8: buffer of materials for nadeo items
	// 0xD8 buf of mwids: (7) _GlassDmgCrack_Glass,_DetailsDmgNormal_Details,_SkinDmg_Skin,...,_SkinDmgDecal_Skin
	// 0xD8: MaterialIds[]
	// 0xE8: string = "Stadium\Media\Material\"
	string get_MaterialsFolderName() { return (this.GetString(0xE8)); }
	void set_MaterialsFolderName(const string &in value) { this.SetString(0xE8, value); }
	// 0xF8: buffer of user materials *
	uint64 get_BufUserMaterialsPtr() { return (this.GetUint64(0xF8)); }
	void set_BufUserMaterialsPtr(uint64 value) { this.SetUint64(0xF8, value); }
	uint32 get_BufUserMaterialsLen() { return (this.GetUint32(0x100)); }
	void set_BufUserMaterialsLen(uint32 value) { this.SetUint32(0x100, value); }
	uint32 get_BufUserMaterialsCap() { return (this.GetUint32(0x104)); }
	void set_BufUserMaterialsCap(uint32 value) { this.SetUint32(0x104, value); }
	// 0x118: uint(2)
	// 0x120: CPlugShaderApply Tech3 CarSkelDmg Teleport
	// 0x128: CPlugShaderApply Tech3 CarSkelDmg Shield
	// 0x130: uint(2)
	// 0x138: CPlugMaterial VehicleTeleport
	// 0x140: CPlugMaterial VehicleShield
	// 0x158: buffer of ?? [(0, 0, 1, 1)] - 1 per vis index tri
	// 0x168: buffer of lights
	// 0x178: buffer of user lights
	// 0x198: buffer of floats? 4,10,40,80
	// 0x1a8: buffer of uint [0x14] / 75731,58700,27996,4956,1108 / vertex count per lod?
	// 0x1b8: buffer of uint [0x0A] / 99656,70976,28449,4438,780
	// 0x1c8: buffer of uint [?] / 58,56,50,8,1
	// 0x1e0: uint(1) in fresh and simple
	// 0x1F8: buffer of custom materials (like materials but for non-nadeo items)
	uint64 get_BufCustomMaterialsPtr() { return (this.GetUint64(0x1F8)); }
	void set_BufCustomMaterialsPtr(uint64 value) { this.SetUint64(0x1F8, value); }
	uint32 get_BufCustomMaterialsLen() { return (this.GetUint32(0x1A0)); }
	void set_BufCustomMaterialsLen(uint32 value) { this.SetUint32(0x1A0, value); }
	uint32 get_BufCustomMaterialsCap() { return (this.GetUint32(0x1A4)); }
	void set_BufCustomMaterialsCap(uint32 value) { this.SetUint32(0x1A4, value); }
	// 0x208: buffer of cplugmaterial -- copy of 0x1F8
	// 0x218: CPlugVisualIndexedTriangles on vehicle mesh / index: static false, 16b, IndexCount: 2340
	// 0x220: buf (len1), 5, 0, 1026, 0.707107, 0.707107, 0, 0, ...
	uint64 get_PreLightGeneratorPtr() { return (this.GetUint64(0x298)); }
	DPlugSolid2ModelPreLightGenerator@ get_PreLightGenerator() { auto _ptr = this.GetUint64(O_SOLID2MODEL_PRELIGHT_GEN); if (_ptr == 0) return null; return DPlugSolid2ModelPreLightGenerator(_ptr); }
	// 0x2b0 ? ?
	// 0x2c8: string of len 0, was: "NadeoImporter Item Items/TestItemEasyToManip-v2.Item.xml"
	CSystemFidFile@ get_ItemFid() { return cast<CSystemFidFile>(this.GetNod(O_SOLID2MODEL_ITEM_FID)); }
	void set_ItemFid(CSystemFidFile@ value) { this.SetNod(O_SOLID2MODEL_ITEM_FID, value); }
	// 0x340: 1, 1
	uint32 get_UnkFlags_340() { return (this.GetUint32(0x340)); }
	void set_UnkFlags_340(uint32 value) { this.SetUint32(0x340, value); }
	uint32 get_UnkFlags_344() { return (this.GetUint32(0x344)); }
	void set_UnkFlags_344(uint32 value) { this.SetUint32(0x344, value); }
}


class DPlugSolid2ModelPreLightGenerator : RawBufferElem {
	DPlugSolid2ModelPreLightGenerator(RawBufferElem@ el) {
		if (el.ElSize != 0x24) throw("invalid size for DPlugSolid2ModelPreLightGenerator");
		super(el.Ptr, el.ElSize);
	}
	DPlugSolid2ModelPreLightGenerator(uint64 ptr) {
		super(ptr, 0x24);
	}

	float get_LMSideLengthMeters() { return (this.GetFloat(0x0)); }
	void set_LMSideLengthMeters(float value) { this.SetFloat(0x0, value); }
	float get_u03() { return (this.GetFloat(0x4)); }
	void set_u03(float value) { this.SetFloat(0x4, value); }
	float get_u04() { return (this.GetFloat(0x8)); }
	void set_u04(float value) { this.SetFloat(0x8, value); }
	float get_u05() { return (this.GetFloat(0xC)); }
	void set_u05(float value) { this.SetFloat(0xC, value); }
	float get_u06() { return (this.GetFloat(0x10)); }
	void set_u06(float value) { this.SetFloat(0x10, value); }
	float get_u07() { return (this.GetFloat(0x14)); }
	void set_u07(float value) { this.SetFloat(0x14, value); }
	float get_u08() { return (this.GetFloat(0x18)); }
	void set_u08(float value) { this.SetFloat(0x18, value); }
	float get_u09() { return (this.GetFloat(0x1C)); }
	void set_u09(float value) { this.SetFloat(0x1C, value); }
	float get_u10() { return (this.GetFloat(0x20)); }
	void set_u10(float value) { this.SetFloat(0x20, value); }
}


