/// ! This file is generated from ../../../codegen/Editor/CPlugVisualIndexedTriangles.xtoml !
/// ! Do not edit this file manually !

class DPlugVisualIndexedTriangles : RawBufferElem {
	DPlugVisualIndexedTriangles(RawBufferElem@ el) {
		if (el.ElSize != SZ_CPlugVisualIndexedTriangles) throw("invalid size for DPlugVisualIndexedTriangles");
		super(el.Ptr, el.ElSize);
	}
	DPlugVisualIndexedTriangles(uint64 ptr) {
		super(ptr, SZ_CPlugVisualIndexedTriangles);
	}
	DPlugVisualIndexedTriangles(CPlugVisualIndexedTriangles@ nod) {
		if (nod is null) throw("not a CPlugVisualIndexedTriangles");
		super(Dev_GetPointerForNod(nod), SZ_CPlugVisualIndexedTriangles);
	}
	CPlugVisualIndexedTriangles@ get_Nod() {
		return cast<CPlugVisualIndexedTriangles>(Dev_GetNodFromPointer(ptr));
	}

	// 0x18: ptr to unk structure (with ptr back to this at +0x20)
	// 0x40: uint(1)
	// 0x60: uint(0)
	// 0x88: vec3(1,1,~0)
	// 0x9A: vec3(1.5,1,.5) midpoint
	// 0xA8: ptr?? (on vehicle shape)
	// 0xB8: uint(1)
	// 0xC0: CPlugVertexStream
	// 0xE0: 1
	// 0xE8: func ptr? / normal ptr? on vehicle shape (to random data)
	// 0xF4: 0xFFFFFFFF
	// 0xF8: 0xF..F
	// 0x108: uint(0)
	// 0x118: uint(0)
	// 0x128: 0xF..F
	// 0x180: CPlugIndexBuffer
	DPlugIndexBuffer@ get_IndexBuffer() { auto _ptr = this.GetUint64(0x180); if (_ptr == 0) return null; return DPlugIndexBuffer(_ptr); }
}


class DPlugIndexBuffer : RawBufferElem {
	DPlugIndexBuffer(RawBufferElem@ el) {
		if (el.ElSize != 56) throw("invalid size for DPlugIndexBuffer");
		super(el.Ptr, el.ElSize);
	}
	DPlugIndexBuffer(uint64 ptr) {
		super(ptr, 56);
	}
	DPlugIndexBuffer(CPlugIndexBuffer@ nod) {
		if (nod is null) throw("not a CPlugIndexBuffer");
		super(Dev_GetPointerForNod(nod), 56);
	}
	CPlugIndexBuffer@ get_Nod() {
		return cast<CPlugIndexBuffer>(Dev_GetNodFromPointer(ptr));
	}

	uint8 get_IsStatic() { return (this.GetUint8(0x20)); }
	void set_IsStatic(uint8 value) { this.SetUint8(0x20, value); }
	uint get_IndexType() { return this.GetUint32(0x20) >> 2; }
	void set_IndexType(uint8 v) { this.SetUint32(0x20, (v << 2) | (this.GetUint32(0x20) & 3)); }
}


// 0x28: buffer of indexes?
// probably some winding.
// 0,1,2,0,2,3,4,5,6,4,6,7,8,9,a,9,b,a,c,d,e,d,f,e,10,11,12,12,11,13
// 0x30: length / IndexCount
class DPlugVertexStream : RawBufferElem {
	DPlugVertexStream(RawBufferElem@ el) {
		if (el.ElSize != 112) throw("invalid size for DPlugVertexStream");
		super(el.Ptr, el.ElSize);
	}
	DPlugVertexStream(uint64 ptr) {
		super(ptr, 112);
	}
	DPlugVertexStream(CPlugVertexStream@ nod) {
		if (nod is null) throw("not a CPlugVertexStream");
		super(Dev_GetPointerForNod(nod), 112);
	}
	CPlugVertexStream@ get_Nod() {
		return cast<CPlugVertexStream>(Dev_GetNodFromPointer(ptr));
	}

	// 0x18: ptr -> { self: 0x0 }
	// 0x30: 20, 20 / 0x14
	// 0x38: 1, flags; 1=IsStatic, 2=IsDirtyVision, 8=SkipVision
	bool get_IsStatic() { return (this.GetBool(0x38)); }
	void set_IsStatic(bool value) { this.SetBool(0x38, value); }
}


