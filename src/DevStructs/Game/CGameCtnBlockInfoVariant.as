/// ! This file is generated from ../../../codegen/Game/CGameCtnBlockInfoVariant.xtoml !
/// ! Do not edit this file manually !

class DGameCtnBlockInfoVariant : RawBufferElem {
	DGameCtnBlockInfoVariant(RawBufferElem@ el) {
		if (el.ElSize != SZ_BLOCKINFOVAR) throw("invalid size for DGameCtnBlockInfoVariant");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnBlockInfoVariant(uint64 ptr) {
		super(ptr, SZ_BLOCKINFOVAR);
	}
	DGameCtnBlockInfoVariant(CGameCtnBlockInfoVariant@ nod) {
		if (nod is null) throw("not a CGameCtnBlockInfoVariant");
		super(Dev_GetPointerForNod(nod), SZ_BLOCKINFOVAR);
	}
	CGameCtnBlockInfoVariant@ get_Nod() {
		return cast<CGameCtnBlockInfoVariant>(Dev_GetNodFromPointer(ptr));
	}

	DGameCtnBlockInfos@ get_Pillars() { return DGameCtnBlockInfos(this.GetBuffer(O_BLOCKINFOVAR_PILLARSArray, SZ_CTNBLOCKINFO, true)); }
}

class DGameCtnBlockInfos : RawBuffer {
	DGameCtnBlockInfos(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DGameCtnBlockInfo@ GetDGameCtnBlockInfo(uint i) {
		return DGameCtnBlockInfo(this[i]);
	}
}

class DGameCtnBlockInfo : RawBufferElem {
	DGameCtnBlockInfo(RawBufferElem@ el) {
		if (el.ElSize != SZ_CTNBLOCKINFO) throw("invalid size for DGameCtnBlockInfo");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnBlockInfo(uint64 ptr) {
		super(ptr, SZ_CTNBLOCKINFO);
	}
	DGameCtnBlockInfo(CGameCtnBlockInfo@ nod) {
		if (nod is null) throw("not a CGameCtnBlockInfo");
		super(Dev_GetPointerForNod(nod), SZ_CTNBLOCKINFO);
	}
	CGameCtnBlockInfo@ get_Nod() {
		return cast<CGameCtnBlockInfo>(Dev_GetNodFromPointer(ptr));
	}

	uint32 get_PackedProps() { return (this.GetUint32(O_CTNBLOCK_MOBILVARIANT)); }
	void set_PackedProps(uint32 value) { this.SetUint32(O_CTNBLOCK_MOBILVARIANT, value); }
	uint8 get_MobilVariant() { return (PackedProps >> 6) & 0x3F; }
	void set_MobilVariant(uint8 value) { PackedProps = (PackedProps & 0xfffff03f) | (uint(value & 0x3f) << 6); }
	uint8 get_VariantIndex() { return (PackedProps >> 21) & 0x3F; }
	void set_VariantIndex(uint8 value) { PackedProps = (PackedProps & 0xf81fffff) | (uint(value & 0x3f) << 21); }
	uint8 get_MobilIndex() { return PackedProps & 0xF; }
	void set_MobilIndex(uint8 value) { PackedProps = (PackedProps & 0xfffffff0) | (uint(value & 0xf)); }
	uint8 get_PlaceMode() { return (PackedProps >> 28) & 0x3; }
	void set_PlaceMode(uint8 value) { PackedProps = (PackedProps & 0xcfffffff) | (uint(value & 0x3) << 28); }
	bool get_IsGround() { return ((PackedProps >> 12) & 1) == 1; }
	void set_IsGround(bool value) { PackedProps = (PackedProps & 0xfeffffff) | (uint(value ? 1 : 0) << 12); }
}


