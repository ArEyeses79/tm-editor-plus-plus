/// ! This file is generated from ../../../codegen/Game/Viewport.xtoml !
/// ! Do not edit this file manually !

class DDx11Viewport : RawBufferElem {
	DDx11Viewport(RawBufferElem@ el) {
		if (el.ElSize != 29248) throw("invalid size for DDx11Viewport");
		super(el.Ptr, el.ElSize);
	}
	DDx11Viewport(uint64 ptr) {
		super(ptr, 29248);
	}
	DDx11Viewport(CDx11Viewport@ nod) {
		if (nod is null) throw("not a CDx11Viewport");
		super(Dev_GetPointerForNod(nod), 29248);
	}
	CDx11Viewport@ get_Nod() {
		return cast<CDx11Viewport>(Dev_GetNodFromPointer(ptr));
	}

	// DisplayNames + 0x10
	DxRenderStuff@ get_mDxRenderStuff() { return DxRenderStuff(this.GetUint64(0x6E0)); }
	DepthBufferStructs@ get_mDepthBufferStructs() { return DepthBufferStructs(this.GetBuffer(0x840, 0x20, false)); }
}

class DepthBufferStructs : RawBuffer {
	DepthBufferStructs(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DepthBufferStruct@ GetDepthBufferStruct(uint i) {
		return DepthBufferStruct(this[i]);
	}
}

class DxRenderStuff : RawBufferElem {
	DxRenderStuff(RawBufferElem@ el) {
		if (el.ElSize != 0x158) throw("invalid size for DxRenderStuff");
		super(el.Ptr, el.ElSize);
	}
	DxRenderStuff(uint64 ptr) {
		super(ptr, 0x158);
	}

	D3D11Device@ get_mDevice() { return D3D11Device(this.GetUint64(0xF0)); }
	D3D11DeviceContext@ get_mDeviceCtx() { return D3D11DeviceContext(this.GetUint64(0xF8)); }
	D3D11DeviceContext@ get_mDeviceCtx2() { return D3D11DeviceContext(this.GetUint64(0x100)); }
	D3D11SwapChain@ get_mSwapChain() { return D3D11SwapChain(this.GetUint64(0x110)); }
}


class DepthBufferStruct : RawBufferElem {
	DepthBufferStruct(RawBufferElem@ el) {
		if (el.ElSize != 0x20) throw("invalid size for DepthBufferStruct");
		super(el.Ptr, el.ElSize);
	}
	DepthBufferStruct(uint64 ptr) {
		super(ptr, 0x20);
	}

	// todo: check offsets
	DPlugBitmap@ get_Bitmap() { return cast<DPlugBitmap>(this.GetNod(0x0)); }
	DRenderInfo@ get_RenderInfo() { return DRenderInfo(this.GetUint64(0x08)); }
	uint get_u1() { return (this.GetUint32(0x10)); }
	uint get_width() { return (this.GetUint32(0x14)); }
	uint get_height() { return (this.GetUint32(0x18)); }
	uint get_u2() { return (this.GetUint32(0x1C)); }
}


class D3D11SwapChain : RawBufferElem {
	D3D11SwapChain(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for D3D11SwapChain");
		super(el.Ptr, el.ElSize);
	}
	D3D11SwapChain(uint64 ptr) {
		super(ptr, 0x8);
	}

	uint64 get_vtable() { return (this.GetUint64(0x0)); }
}


class D3D11Device : RawBufferElem {
	D3D11Device(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for D3D11Device");
		super(el.Ptr, el.ElSize);
	}
	D3D11Device(uint64 ptr) {
		super(ptr, 0x8);
	}

	uint64 get_vtable() { return (this.GetUint64(0x0)); }
}


class D3D11DeviceContext : RawBufferElem {
	D3D11DeviceContext(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for D3D11DeviceContext");
		super(el.Ptr, el.ElSize);
	}
	D3D11DeviceContext(uint64 ptr) {
		super(ptr, 0x8);
	}

	uint64 get_vtable() { return (this.GetUint64(0x0)); }
}


class D3D11Texture : RawBufferElem {
	D3D11Texture(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for D3D11Texture");
		super(el.Ptr, el.ElSize);
	}
	D3D11Texture(uint64 ptr) {
		super(ptr, 0x8);
	}

	uint64 get_vtable() { return (this.GetUint64(0x0)); }
}


// unsure of size, seems like 0x280
class DRenderInfo : RawBufferElem {
	DRenderInfo(RawBufferElem@ el) {
		if (el.ElSize != 0x280) throw("invalid size for DRenderInfo");
		super(el.Ptr, el.ElSize);
	}
	DRenderInfo(uint64 ptr) {
		super(ptr, 0x280);
	}

	// 0x130? -> 0xD0 to texture also
	DPlugBitmap@ get_Bitmap() { return DPlugBitmap(this.GetUint64(0x200)); }
	uint64 get_PtrTo_0x248() { return (this.GetUint64(0x250)); }
	D3D11Texture@ get_Texture() { return D3D11Texture(this.GetUint64(0x258)); }
}


