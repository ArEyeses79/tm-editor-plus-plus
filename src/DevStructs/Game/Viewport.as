/// ! This file is generated from ../../../codegen/Game/Viewport.xtoml !
/// ! Do not edit this file manually !

class Viewport : RawBufferElem {
	Viewport(RawBufferElem@ el) {
		if (el.ElSize != 29248) throw("invalid size for Viewport");
		super(el.Ptr, el.ElSize);
	}
	Viewport(uint64 ptr) {
		super(ptr, 29248);
	}
	Viewport(CDx11Viewport@ nod) {
		if (nod is null) throw("not a CDx11Viewport");
		super(Dev_GetPointerForNod(nod), 29248);
	}
	CDx11Viewport@ get_Nod() {
		return cast<CDx11Viewport>(Dev_GetNodFromPointer(ptr));
	}

	// DisplayNames + 0x10
	DxRenderStuff@ get_mDxRenderStuff() { return DxRenderStuff(this.GetUint64(0x6E0)); }
	DepthBufferStructs@ get_mDepthBufferStructs() { return DepthBufferStructs(this.GetBuffer(0x840, 0x20, false)); }
}

class DepthBufferStructs : RawBuffer {
	DepthBufferStructs(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DepthBufferStruct@ GetDepthBufferStruct(uint i) {
		return DepthBufferStruct(this[i]);
	}
}

class DxRenderStuff : RawBufferElem {
	DxRenderStuff(RawBufferElem@ el) {
		if (el.ElSize != 0x158) throw("invalid size for DxRenderStuff");
		super(el.Ptr, el.ElSize);
	}
	DxRenderStuff(uint64 ptr) {
		super(ptr, 0x158);
	}

	SwapChain@ get_mSwapChain() { return SwapChain(this.GetUint64(0x110)); }
}


class DepthBufferStruct : RawBufferElem {
	DepthBufferStruct(RawBufferElem@ el) {
		if (el.ElSize != 0x20) throw("invalid size for DepthBufferStruct");
		super(el.Ptr, el.ElSize);
	}
	DepthBufferStruct(uint64 ptr) {
		super(ptr, 0x20);
	}

	// todo: check offsets
	CPlugBitmap@ get_Bitmap() { return cast<CPlugBitmap>(this.GetNod(0x0)); }
	DxStuff@ get_DxStuff() { return DxStuff(this.GetUint64(0x08)); }
	uint get_u1() { return (this.GetUint32(0x10)); }
	uint get_width() { return (this.GetUint32(0x14)); }
	uint get_height() { return (this.GetUint32(0x18)); }
	uint get_u2() { return (this.GetUint32(0x1C)); }
}


class SwapChain : RawBufferElem {
	SwapChain(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for SwapChain");
		super(el.Ptr, el.ElSize);
	}
	SwapChain(uint64 ptr) {
		super(ptr, 0x8);
	}

	uint64 get_vtable() { return (this.GetUint64(0x0)); }
}


class DxStuff : RawBufferElem {
	DxStuff(RawBufferElem@ el) {
		if (el.ElSize != 0x0) throw("invalid size for DxStuff");
		super(el.Ptr, el.ElSize);
	}
	DxStuff(uint64 ptr) {
		super(ptr, 0x0);
	}

}


