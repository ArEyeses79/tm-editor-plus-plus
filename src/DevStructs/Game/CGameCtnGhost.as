/// ! This file is generated from ../../../codegen/Game/CGameCtnGhost.xtoml !
/// ! Do not edit this file manually !

class DGameCtnGhost : RawBufferElem {
	DGameCtnGhost(RawBufferElem@ el) {
		if (el.ElSize != 0x330) throw("invalid size for DGameCtnGhost");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnGhost(uint64 ptr) {
		super(ptr, 0x330);
	}
	DGameCtnGhost(CGameCtnGhost@ nod) {
		if (nod is null) throw("not a CGameCtnGhost");
		super(Dev_GetPointerForNod(nod), 0x330);
	}
	CGameCtnGhost@ get_Nod() {
		return cast<CGameCtnGhost>(Dev_GetNodFromPointer(ptr));
	}

	DGameCtnGhost_CPs@ get_Checkpoints() { return DGameCtnGhost_CPs(this.GetBuffer(O_CTN_GHOST_CHECKPOINTS_BUF, 0x8, false)); }
	DGameCtnGhost_PlayerInputs@ get_Inputs() { return DGameCtnGhost_PlayerInputs(this.GetBuffer(O_CTN_GHOST_PLAYER_INPUTS_BUF, 0x18, false)); }
}

class DGameCtnGhost_CPs : RawBuffer {
	DGameCtnGhost_CPs(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DGameCtnGhost_CP@ GetCP(uint i) {
		return DGameCtnGhost_CP(this[i]);
	}
}


class DGameCtnGhost_PlayerInputs : RawBuffer {
	DGameCtnGhost_PlayerInputs(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DGameCtnGhost_PlayerInput@ GetPlayerInput(uint i) {
		return DGameCtnGhost_PlayerInput(this[i]);
	}
}

// might be bigger, unsure
class DGameCtnGhost_PlayerInput : RawBufferElem {
	DGameCtnGhost_PlayerInput(RawBufferElem@ el) {
		if (el.ElSize != 0x18) throw("invalid size for DGameCtnGhost_PlayerInput");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnGhost_PlayerInput(uint64 ptr) {
		super(ptr, 0x18);
	}

	uint get_u01() { return (this.GetUint32(0x0)); }
	void set_u01(uint value) { this.SetUint32(0x0, value); }
	int get_startOffset() { return (this.GetInt32(0x4)); }
	void set_startOffset(int value) { this.SetInt32(0x4, value); }
	int get_version() { return (this.GetInt32(0x8)); }
	void set_version(int value) { this.SetInt32(0x8, value); }
	int get_ticks() { return (this.GetInt32(0xC)); }
	void set_ticks(int value) { this.SetInt32(0xC, value); }
	DGameCtnGhost_PlayerInputData@ get_InputData() { auto _ptr = this.GetUint64(0x10); if (_ptr == 0) return null; return DGameCtnGhost_PlayerInputData(_ptr); }
}


// could be bigger
class DGameCtnGhost_PlayerInputData : RawBufferElem {
	DGameCtnGhost_PlayerInputData(RawBufferElem@ el) {
		if (el.ElSize != 0x30) throw("invalid size for DGameCtnGhost_PlayerInputData");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnGhost_PlayerInputData(uint64 ptr) {
		super(ptr, 0x30);
	}

	uint64 get_BytesPtr() { return (this.GetUint64(0x18)); }
	uint get_BytesLen() { return (this.GetUint32(0x20)); }
	uint get_BytesLen2() { return (this.GetUint32(0x28)); }
	uint get_BytesLen3() { return (this.GetUint32(0x2C)); }
	DGameCtnGhost_InputData_Bytes@ get_Bytes() { return DGameCtnGhost_InputData_Bytes(this.GetBuffer(0x18, 0x1, false)); }
}

class DGameCtnGhost_InputData_Bytes : RawBuffer {
	DGameCtnGhost_InputData_Bytes(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DGameCtnGhost_InputData_Byte@ GetByte(uint i) {
		return DGameCtnGhost_InputData_Byte(this[i]);
	}
}

class DGameCtnGhost_CP : RawBufferElem {
	DGameCtnGhost_CP(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for DGameCtnGhost_CP");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnGhost_CP(uint64 ptr) {
		super(ptr, 0x8);
	}

	int get_cpIndex() { return (this.GetInt32(0x0)); }
	int get_cpTime() { return (this.GetInt32(0x4)); }
}


class DGameCtnGhost_InputData_Byte : RawBufferElem {
	DGameCtnGhost_InputData_Byte(RawBufferElem@ el) {
		if (el.ElSize != 0x1) throw("invalid size for DGameCtnGhost_InputData_Byte");
		super(el.Ptr, el.ElSize);
	}
	DGameCtnGhost_InputData_Byte(uint64 ptr) {
		super(ptr, 0x1);
	}

	uint8 get_v() { return (this.GetUint8(0x0)); }
}


